module IntegerSum
  Delta = {1}
exports
  nametype Data = { -CN*N..CN*N }
  data(state) = state
  initialState = 0
  datatype Update = Add.Delta | Subtract.Delta
  nametype Operation = Update
  possible(_) = Operation
  -- TID is opaque transaction ID â€“ probably a clock
  -- apply :: (TID, State, Operation) -> State
  apply(tid, state, Add.n) = state + n
  apply(tid, state, Subtract.n) = state - n
  -- transact :: (State, Update) -> Operation
  transact(state, up) = up
endmodule
